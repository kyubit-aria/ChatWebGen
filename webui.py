import gradio as gr
import openai
import os
#set API key
openai.api_key = os.environ["OPENAI_API_KEY"]

def generateAppTemplate (text):
    result = openai.ChatCompletion.create(
    model="gpt-3.5-turbo",
    messages =[
            {"role": "system", "content": "You are a web application architect"},
            {"role": "user", 
            "content": f"""Create a legal JSON array of the app components in camel case using description: {text}. Each element in the array needs a value which states the most effective angular ng generate type. Also, add a description in each element"""},
        ]
    )
    
    return generate_angular_app(result.choices[0].message.content, "gen/app", "auto")

import json
import shutil
import subprocess
# GENERATED BY GPT 3.5
def generate_angular_app(json_data, app_dir, project_name):
    #Extract the array only; drop "Here's a ..."
    string_filtered = json_data[json_data.find('['):json_data.find(']')+1]

    print(string_filtered)
    #Parse string into JSON object
    data = json.loads(string_filtered)

    # Parse the JSON data
    if not os.path.exists(app_dir):
         os.makedirs(app_dir)
    os.chdir(app_dir)
    
    subprocess.run(['ng', 'new', '--defaults', 'true','--skip-install' , '--name', project_name], shell=True)
    os.chdir(project_name)
    
    for component in data:
        subprocess.run(['ng', 'generate', component['ngGenerateType'].lower(), component['name'] ], shell=True)

    return string_filtered

#Configure interfaces
app_gen_interface = gr.Interface(generateAppTemplate, "text", "text",
                     description="Query about website",
                     title="Web query")

interfaces = [app_gen_interface]
tabbed_interface = gr.TabbedInterface(interfaces,title="Web Creator")

#run
if __name__ == "__main__":
    tabbed_interface.launch()
